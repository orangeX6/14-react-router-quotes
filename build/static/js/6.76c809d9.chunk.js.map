{"version":3,"sources":["components/ui/Card.module.css","components/quotes/QuoteForm.module.css","components/ui/Card.js","components/quotes/QuoteForm.js","pages/NewQuote.js"],"names":["module","exports","Card","props","className","classes","card","children","QuoteForm","authorInputRef","useRef","textInputRef","useState","isFormFocused","setIsFormFocused","when","message","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","onFocus","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","rows","actions","onClick","NewQuote","useHttp","addQuote","sendRequest","status","history","useHistory","useEffect","push","pathname","quoteData"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,6B,yFCKtHC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,EAAMI,Y,yBCqE/BC,EAjEG,SAACL,GACjB,IAAMM,EAAiBC,mBACjBC,EAAeD,mBACrB,EAA0CE,oBAAS,GAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KAsBA,OACE,eAAC,WAAD,WACE,cAAC,IAAD,CACEC,KAAMF,EACNG,QAAS,WAEP,MAAO,uEAGX,cAAC,EAAD,UACE,uBACEZ,UAAWC,IAAQY,KACnBC,SAhCR,SAA2BC,GACzBA,EAAMC,iBAEN,IAAMC,EAAgBZ,EAAea,QAAQC,MACvCC,EAAcb,EAAaW,QAAQC,MAIzCpB,EAAMsB,WAAW,CAAEC,OAAQL,EAAeM,KAAMH,KAyB1CI,QAtBiB,WAEvBd,GAAiB,IAiBb,UAKGX,EAAM0B,WACL,qBAAKzB,UAAWC,IAAQyB,QAAxB,SACE,cAACC,EAAA,EAAD,MAIJ,sBAAK3B,UAAWC,IAAQ2B,QAAxB,UACE,uBAAOC,QAAQ,SAAf,oBACA,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAK3B,OAEtC,sBAAKL,UAAWC,IAAQ2B,QAAxB,UACE,uBAAOC,QAAQ,OAAf,kBACA,0BAAUE,GAAG,OAAOE,KAAK,IAAID,IAAKzB,OAEpC,qBAAKP,UAAWC,IAAQiC,QAAxB,SACE,wBAAQC,QAlCS,WACzBzB,GAAiB,IAiC4BV,UAAU,MAA/C,kC,gBClCGoC,UArBE,WACf,MAAgCC,YAAQC,KAAhCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OACfC,EAAUC,cAGhBC,qBAAU,WACO,cAAXH,GACFC,EAAQG,KAAK,CAAEC,SAAU,cAE1B,CAACL,EAAQC,IAOZ,OACE,cAAC,EAAD,CAAWhB,UAAsB,YAAXe,EAAsBnB,WANtB,SAACyB,GACvBP,EAAYO","file":"static/js/6.76c809d9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1hIcU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__qRwip\",\"loading\":\"QuoteForm_loading__2Om1B\",\"control\":\"QuoteForm_control__oj4le\",\"actions\":\"QuoteForm_actions__HQz-E\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { useRef, useState, Fragment } from 'react';\r\nimport { Prompt } from 'react-router-dom';\r\n\r\nimport Card from '../ui/Card';\r\nimport LoadingSpinner from '../ui/LoadingSpinner';\r\nimport classes from './QuoteForm.module.css';\r\n\r\nconst QuoteForm = (props) => {\r\n  const authorInputRef = useRef();\r\n  const textInputRef = useRef();\r\n  const [isFormFocused, setIsFormFocused] = useState(false);\r\n\r\n  function submitFormHandler(event) {\r\n    event.preventDefault();\r\n\r\n    const enteredAuthor = authorInputRef.current.value;\r\n    const enteredText = textInputRef.current.value;\r\n\r\n    // optional: Could validate here\r\n\r\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\r\n  }\r\n\r\n  const formFocusHandler = () => {\r\n    // console.log('Focus!!');\r\n    setIsFormFocused(true);\r\n  };\r\n\r\n  const dataEnteredHandler = () => {\r\n    setIsFormFocused(false);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Prompt\r\n        when={isFormFocused}\r\n        message={() => {\r\n          // console.log(location);\r\n          return 'Are you sure you want to leave? All the entered data will be lost';\r\n        }}\r\n      />\r\n      <Card>\r\n        <form\r\n          className={classes.form}\r\n          onSubmit={submitFormHandler}\r\n          onFocus={formFocusHandler}\r\n        >\r\n          {props.isLoading && (\r\n            <div className={classes.loading}>\r\n              <LoadingSpinner />\r\n            </div>\r\n          )}\r\n\r\n          <div className={classes.control}>\r\n            <label htmlFor=\"author\">Author</label>\r\n            <input type=\"text\" id=\"author\" ref={authorInputRef} />\r\n          </div>\r\n          <div className={classes.control}>\r\n            <label htmlFor=\"text\">Text</label>\r\n            <textarea id=\"text\" rows=\"5\" ref={textInputRef}></textarea>\r\n          </div>\r\n          <div className={classes.actions}>\r\n            <button onClick={dataEnteredHandler} className=\"btn\">\r\n              Add Quote\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </Card>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default QuoteForm;\r\n","import { useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport QuoteForm from '../components/quotes/QuoteForm';\r\nimport useHttp from '../hooks/use-http';\r\nimport { addQuote } from '../lib/api';\r\n\r\nconst NewQuote = () => {\r\n  const { sendRequest, status } = useHttp(addQuote);\r\n  const history = useHistory();\r\n  // console.log(status);\r\n\r\n  useEffect(() => {\r\n    if (status === 'completed') {\r\n      history.push({ pathname: '/quotes' });\r\n    }\r\n  }, [status, history]);\r\n\r\n  const addQuoteHandler = (quoteData) => {\r\n    sendRequest(quoteData);\r\n    // console.log(quoteData);\r\n  };\r\n\r\n  return (\r\n    <QuoteForm isLoading={status === 'pending'} onAddQuote={addQuoteHandler} />\r\n  );\r\n};\r\n\r\nexport default NewQuote;\r\n"],"sourceRoot":""}